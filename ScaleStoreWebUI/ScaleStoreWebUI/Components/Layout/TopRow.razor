@using PreferenceDTO
@using System.Text.Json;
@inject ProjectPreferenceApiService ProjectPreferenceApiService
@inject ScaleStoreApiService ScaleStoreApiService
@inject ILogger<TopRow> Logger



<div class="top-row px-4">
    <div class="m-3 top-row-items">
        <h5 class="text-primary">Select a Project</h5>
        <p>Select from the list to view project details:</p>

        @if (InitialRequestLoading)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <InputSelect @bind-Value="FormModel.ProjectId" class="form-select">
                @if (ListOfProjects.Count > 0)
                {
                    @foreach (var project in ListOfProjects)
                    {
                        <option value="@project.Id">@project.Name</option>
                    }
                }
            </InputSelect>
            <button @onclick="ProjectSelectionChange" class="btn btn-primary btn-sm mt-3">Select</button>
        }
    </div>
</div>

@code {
    bool InitialRequestLoading = true;
    private ProjectPreference ProjectPreferenceApiResponse = new();
    private List<ProjectName> ListOfProjects = new();
    private ProjectPreferenceForm FormModel = new();


    private bool IsNewProjectPreferenceSelected()
    {
        return ProjectPreferenceApiResponse.ProjectId != FormModel.ProjectId;
    }

    protected override async Task OnInitializedAsync()
    {
        await GetProjectSelection();
    }

    private async Task GetProjectSelection()
    {
        ProjectPreferenceApiResponse = await ProjectPreferenceApiService.GetProjectPreference(1) ?? new();
        InitialRequestLoading = false;

        Logger.LogInformation("ProjectPreferenceApiResponse: {0}", JsonSerializer.Serialize(ProjectPreferenceApiResponse));

        ListOfProjects = await ScaleStoreApiService.GetListOfProjectNames(1) ?? new List<ProjectName>();

        foreach (var project in ListOfProjects)
        {
            if (project.Id == ProjectPreferenceApiResponse.ProjectId)
            {
                FormModel.ProjectId = project.Id;
                break;
            }
        }
    }

    private async Task ProjectSelectionChange()
    {
        Logger.LogInformation("Now in ProjectSelectionChange & SelectedProjectId: {0}", FormModel.ProjectId);

        var apiResponse = await ProjectPreferenceApiService.UpdateProjectPreference(FormModel.ProjectId, 1);

        Logger.LogInformation("ProjectPreferenceApiResponse: {0}", apiResponse);

        if (string.IsNullOrEmpty(apiResponse))
        {
            Logger.LogError("Failed to update project preference");
            return;
        }

        Logger.LogInformation("Project preference updated successfully");

        await GetProjectSelection();
    }

    class ProjectPreferenceForm
    {
        public int ProjectId { get; set; }
    }



    private void handleClickMe()
    {
        Logger.LogInformation("handleClickMe");
    }
}

